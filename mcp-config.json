{
  "mcpServers": {
    "living-dev-agent": {
      "command": "python",
      "args": ["-m", "scripts.mcp_server"],
      "env": {
        "PYTHONPATH": "."
      }
    }
  },
  "mcpConfig": {
    "version": "1.0.0",
    "description": "MCP server configuration for Living Dev Agent template",
    "capabilities": {
      "tools": [
        {
          "name": "validate_tldl",
          "description": "Validate TLDL entries for completeness and format",
          "parameters": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Path to TLDL file or directory"
              },
              "strict": {
                "type": "boolean",
                "description": "Enable strict validation mode",
                "default": false
              }
            },
            "required": ["path"]
          }
        },
        {
          "name": "create_tldl_entry",
          "description": "Create a new TLDL entry from template",
          "parameters": {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "description": "Title for the TLDL entry"
              },
              "context": {
                "type": "string",
                "description": "Context or issue reference"
              },
              "author": {
                "type": "string",
                "description": "Author name",
                "default": "@copilot"
              }
            },
            "required": ["title"]
          }
        },
        {
          "name": "capture_devtimetravel_snapshot",
          "description": "Capture a DevTimeTravel snapshot",
          "parameters": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "description": "Snapshot description"
              },
              "tag": {
                "type": "string",
                "description": "Optional tag for categorization"
              },
              "include_uncommitted": {
                "type": "boolean",
                "description": "Include uncommitted changes",
                "default": true
              }
            },
            "required": ["message"]
          }
        },
        {
          "name": "run_linters",
          "description": "Run all configured linters",
          "parameters": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Path to analyze",
                "default": "src/"
              },
              "linter_type": {
                "type": "string",
                "enum": ["all", "symbolic", "ecs", "docs", "debug"],
                "description": "Type of linter to run",
                "default": "all"
              },
              "output_format": {
                "type": "string",
                "enum": ["text", "json"],
                "description": "Output format",
                "default": "text"
              }
            }
          }
        },
        {
          "name": "validate_debug_overlay",
          "description": "Validate debug overlay systems",
          "parameters": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "description": "Path to debug overlay validation directory",
                "default": "src/DebugOverlayValidation/"
              }
            }
          }
        },
        {
          "name": "get_project_health",
          "description": "Get overall project health metrics",
          "parameters": {
            "type": "object",
            "properties": {
              "include_details": {
                "type": "boolean",
                "description": "Include detailed breakdown",
                "default": false
              }
            }
          }
        }
      ],
      "resources": [
        {
          "name": "tldl_entries",
          "description": "Access to TLDL entries",
          "uri": "file://docs/TLDL-*.md"
        },
        {
          "name": "devtimetravel_config",
          "description": "DevTimeTravel configuration",
          "uri": "file://docs/devtimetravel_snapshot.yaml"
        },
        {
          "name": "copilot_config",
          "description": "Copilot agent configuration",
          "uri": "file://TWG-Copilot-Agent.yaml"
        }
      ]
    }
  },
  "serverConfig": {
    "host": "localhost",
    "port": 8000,
    "timeout": 30000,
    "maxRetries": 3,
    "hardFailOnExhaustion": true,
    "connectionProfiling": true,
    "startupTimeoutBuffer": 15000,
    "logging": {
      "level": "INFO",
      "format": "json",
      "output": "logs/mcp-server.log"
    }
  },
  "security": {
    "allowedOrigins": [
      "https://github.com",
      "https://vscode.dev",
      "https://github.dev"
    ],
    "localhostRestrictions": {
      "enabled": true,
      "allowedPorts": [],
      "comment": "Localhost access disabled for security - use specific origins only"
    },
    "rateLimiting": {
      "enabled": true,
      "requestsPerMinute": 60,
      "burstLimit": 10
    },
    "tokenValidation": {
      "enabled": true,
      "requiredScopes": ["repo", "workflow"],
      "rotationWarningDays": 90
    }
  },
  "development": {
    "debugMode": false,
    "mockResponses": false,
    "verboseLogging": false,
    "dependencyValidation": {
      "enabled": true,
      "pinnedVersions": {
        "@playwright/mcp": "0.0.34"
      },
      "allowDynamicInstalls": false
    }
  },
  "integrations": {
    "github": {
      "enabled": true,
      "webhooks": {
        "push": true,
        "pull_request": true,
        "issues": true
      }
    },
    "copilot": {
      "enabled": true,
      "features": {
        "auto_tldl": true,
        "context_enhancement": true,
        "validation_integration": true
      }
    }
  },
  "toolAllowListAudit": {
    "enabled": true,
    "strictMode": true,
    "auditLog": "logs/mcp-tool-audit.log",
    "allowedTools": [
      "validate_tldl",
      "create_tldl_entry", 
      "capture_devtimetravel_snapshot",
      "run_linters",
      "validate_debug_overlay",
      "get_project_health"
    ],
    "blockedTools": [
      "search_repository_with_agent"
    ],
    "warningTools": []
  }
}