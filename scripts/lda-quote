#!/usr/bin/env bash
#
# 🎭 Enhanced Scroll Quote CLI - Access the Secret Art of the Living Dev
# Now with Warbler-powered dynamic wisdom generation!
#
# Usage examples:
#   ./lda-quote                     # Random quote
#   ./lda-quote --context readme   # Context-appropriate quote
#   ./lda-quote --warbler           # Include generated quotes
#   ./lda-quote --generate 3        # Generate 3 new quotes
#   ./lda-quote --markdown          # Markdown formatted quote
#
set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Default values
CONTEXT=""
CATEGORY=""
FORMAT="cli"
BUTTSAFE_ONLY=false
USE_WARBLER=false
GENERATE_COUNT=""
SHOW_STATS=false
VALIDATE=false

# Colors
BLUE='\033[0;34m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
PURPLE='\033[0;35m'
NC='\033[0m'

# ---------- Python bootstrap (cross-platform, non-interactive) ----------
command_exists() { command -v "$1" >/dev/null 2>&1; }

create_python3_shim_if_needed() {
  if command_exists python && ! command_exists python3; then
    mkdir -p "$PROJECT_ROOT/.bin"
    cat > "$PROJECT_ROOT/.bin/python3" <<'EOF'
#!/usr/bin/env bash
exec python "$@"
EOF
    chmod +x "$PROJECT_ROOT/.bin/python3"
    export PATH="$PROJECT_ROOT/.bin:$PATH"
  fi
}

ensure_python() {
  if command_exists python3 || command_exists python; then
    create_python3_shim_if_needed
    return 0
  fi
  return 1
}

ensure_python || true
PY=$(command -v python3 || command -v python || echo "")
export PY
# ---------- end Python bootstrap ----------

show_help() {
    echo -e "${PURPLE}🎭 Enhanced Scroll Quote CLI - The Living Oracle${NC}"
    echo -e "${PURPLE}   Access the Secret Art of the Living Dev with Warbler power!${NC}"
    echo ""
    echo "Usage: $0 [options]"
    echo ""
    echo "Quote Selection:"
    echo "  --context <context>     Get quote for specific context (readme, tldl, ci, etc.)"
    echo "  --category <category>   Get quote from specific category"
    echo "                         (general, development, debugging, documentation, commits,"
    echo "                          ci_cd, buttsafe, workflow, lore)"
    echo "  --format <format>       Output format: cli, markdown, plain (default: cli)"
    echo "  --buttsafe             Only show buttsafe certified quotes"
    echo ""
    echo "Warbler Integration:"
    echo "  --warbler              Include Warbler-generated quotes in selection"
    echo "  --generate <count>     Generate new quotes using Warbler (1-10)"
    echo "  --classic              Use only classic static quotes (default)"
    echo ""
    echo "Information:"
    echo "  --stats                Show enhanced database statistics"
    echo "  --validate             Validate quote databases"
    echo "  --help, -h             Show this help"
    echo ""
    echo "Examples:"
    echo "  $0                                    # Random classic quote"
    echo "  $0 --warbler                         # Random quote (classic or generated)"
    echo "  $0 --generate 5                      # Generate 5 new wisdom quotes"
    echo "  $0 --context readme --warbler        # README quote with generated options"
    echo "  $0 --category buttsafe --markdown    # Buttsafe quote in markdown"
    echo "  $0 --stats                          # Enhanced quote statistics"
    echo ""
    echo -e "${GREEN}🍑 Part of the Living Dev Agent ecosystem - Save the butts!${NC}"
    echo -e "${YELLOW}✨ Enhanced with Warbler-powered dynamic wisdom generation${NC}"
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --context)
            CONTEXT="$2"
            shift 2
            ;;
        --category)
            CATEGORY="$2"
            shift 2
            ;;
        --format)
            FORMAT="$2"
            shift 2
            ;;
        --buttsafe)
            BUTTSAFE_ONLY=true
            shift
            ;;
        --warbler)
            USE_WARBLER=true
            shift
            ;;
        --classic)
            USE_WARBLER=false
            shift
            ;;
        --generate)
            USE_WARBLER=true
            GENERATE_COUNT="$2"
            shift 2
            ;;
        --stats)
            SHOW_STATS=true
            shift
            ;;
        --validate)
            VALIDATE=true
            shift
            ;;
        --help|-h)
            show_help
            exit 0
            ;;
        *)
            echo -e "${YELLOW}⚠️  Unknown option: $1${NC}"
            show_help
            exit 1
            ;;
    esac
done

# Apply buttsafe-only preference by defaulting category when not set
if [[ "$BUTTSAFE_ONLY" == true && -z "$CATEGORY" ]]; then
    CATEGORY="buttsafe"
fi

# Check if Python is available
if [[ -z "$PY" ]] || ! command -v "$PY" &> /dev/null; then
    echo -e "${YELLOW}⚠️  Python not available. Cannot access the Secret Art.${NC}"
    exit 1
fi

# Determine which engine to use
if [[ "$USE_WARBLER" == true ]]; then
    QUOTE_ENGINE="$PROJECT_ROOT/src/ScrollQuoteEngine/warbler_quote_engine.py"
    ENGINE_NAME="Warbler-Powered Oracle"
else
    QUOTE_ENGINE="$PROJECT_ROOT/src/ScrollQuoteEngine/quote_engine.py"
    ENGINE_NAME="Classic Scroll Engine"
fi

# Check if selected engine exists
if [[ ! -f "$QUOTE_ENGINE" ]]; then
    echo -e "${YELLOW}⚠️  $ENGINE_NAME not found. The scrolls may be missing.${NC}"
    
    # Fallback to classic if Warbler not found
    if [[ "$USE_WARBLER" == true ]]; then
        echo -e "${BLUE}🔄 Falling back to classic quote engine...${NC}"
        QUOTE_ENGINE="$PROJECT_ROOT/src/ScrollQuoteEngine/quote_engine.py"
        USE_WARBLER=false
        
        if [[ ! -f "$QUOTE_ENGINE" ]]; then
            echo -e "${YELLOW}⚠️  Classic quote engine also missing.${NC}"
            exit 1
        fi
    else
        exit 1
    fi
fi

# Handle special commands
if [[ "$SHOW_STATS" == true ]]; then
    if [[ "$USE_WARBLER" == true ]]; then
        echo -e "${PURPLE}🎭 Warbler-Powered Oracle Statistics:${NC}"
        "$PY" "$QUOTE_ENGINE" --stats
    else
        echo -e "${BLUE}📚 Classic Scroll Database Statistics:${NC}"
        "$PY" "$QUOTE_ENGINE" --stats
    fi
    exit 0
fi

if [[ "$VALIDATE" == true ]]; then
    if [[ "$USE_WARBLER" == true ]]; then
        echo -e "${PURPLE}🎭 Validating Warbler Oracle...${NC}"
        # Warbler engine doesn't have validate yet, fall back to classic
        "$PY" "$PROJECT_ROOT/src/ScrollQuoteEngine/quote_engine.py" --validate
    else
        echo -e "${BLUE}📚 Validating Classic Scrolls...${NC}"
        "$PY" "$QUOTE_ENGINE" --validate
    fi
    exit 0
fi

if [[ -n "$GENERATE_COUNT" ]]; then
    echo -e "${PURPLE}🎭 Generating $GENERATE_COUNT new wisdom quotes...${NC}"
    "$PY" "$QUOTE_ENGINE" --generate "$GENERATE_COUNT"
    exit 0
fi

# Build the quote retrieval command
CMD="\"$PY\" \"$QUOTE_ENGINE\""

if [[ -n "$CONTEXT" ]]; then
    CMD="$CMD --context '$CONTEXT'"
fi

if [[ -n "$CATEGORY" ]]; then
    CMD="$CMD --category '$CATEGORY'"
fi

if [[ "$FORMAT" != "cli" ]]; then
    CMD="$CMD --format '$FORMAT'"
fi

# Add Warbler-specific options
if [[ "$USE_WARBLER" == false ]]; then
    CMD="$CMD --no-generated"
fi

# Show engine indicator for clarity
if [[ "$USE_WARBLER" == true ]]; then
    echo -e "${PURPLE}🎭 Consulting the Warbler Oracle...${NC}" >&2
else
    echo -e "${BLUE}📚 Reading from the Classic Scrolls...${NC}" >&2
fi

# Execute the command
eval "$CMD"
