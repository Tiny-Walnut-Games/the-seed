#!/usr/bin/env python3
"""
Generate markdown report from streak analysis data.
"""
import argparse
import json
import sys
from pathlib import Path
from datetime import datetime


def load_analysis(analysis_file: Path) -> dict:
    """Load streak analysis JSON."""
    with open(analysis_file, 'r', encoding='utf-8') as f:
        return json.load(f)


def load_template(template_file: Path) -> str:
    """Load report template."""
    if template_file.exists():
        with open(template_file, 'r', encoding='utf-8') as f:
            return f.read()
    return get_default_template()


def get_default_template() -> str:
    """Return default report template."""
    return """# üî• Idea Implementation Streak Report

**Generated**: {timestamp}
**Evaluation Window**: {window} days

## üìä Overall Health

- **Status**: {status_emoji} {status}
- **Implementation Ratio**: {ratio} ({implementations}/{total_charters})
- **Trend**: {trend}

## üìà Statistics

| Metric | Count |
|--------|-------|
| Total Charters Created | {total_charters} |
| Implementations Completed | {implementations_completed} |
| Ideas In Progress | {ideas_in_progress} |
| Ideas Abandoned | {ideas_abandoned} |
| Average Days to Complete | {avg_days_to_complete} |

## üéØ Stalled Charters

{stalled_charters_section}

## üí° Insights

{insights}

---
*Generated by Streak Monitor System*
"""


def format_stalled_charters(analysis: dict) -> str:
    """Format stalled charters section."""
    stalled = analysis.get('stalled_charters', [])
    if not stalled:
        return "_No stalled charters detected._"
    
    lines = []
    for charter in stalled:
        lines.append(f"- **{charter['title']}** ({charter['days_stalled']} days) - {charter['status']}")
    return "\n".join(lines)


def generate_insights(analysis: dict) -> str:
    """Generate insights from analysis data."""
    insights = []
    
    ratio = analysis.get('implementation_ratio', 0)
    status = analysis.get('streak_status', 'unknown')
    
    if ratio >= 0.8:
        insights.append("‚úÖ **Excellent implementation momentum.** Team is effectively converting ideas to reality.")
    elif ratio >= 0.6:
        insights.append("üëç **Good implementation pace.** Keep prioritizing charter completion.")
    elif ratio >= 0.4:
        insights.append("‚ö†Ô∏è **Implementation rate needs attention.** Consider reviewing charter complexity.")
    else:
        insights.append("üö® **Critical implementation gap.** Immediate intervention recommended.")
    
    stalled_count = len(analysis.get('stalled_charters', []))
    if stalled_count > 5:
        insights.append(f"üìã **{stalled_count} stalled charters detected.** Review priorities and blockers.")
    
    avg_days = analysis.get('avg_days_to_complete', 0)
    if avg_days > 14:
        insights.append(f"‚è±Ô∏è **Average completion time: {avg_days:.1f} days.** Consider breaking charters into smaller units.")
    
    return "\n".join(insights) if insights else "_Analysis complete. No specific insights generated._"


def generate_report(analysis: dict, template: str) -> str:
    """Generate report from analysis and template."""
    status = analysis.get('streak_status', 'unknown')
    status_emoji = {
        'healthy': '‚úÖ',
        'concerning': '‚ö†Ô∏è',
        'critical': 'üî•'
    }.get(status, '‚ùì')
    
    ratio = analysis.get('implementation_ratio', 0)
    
    report = template.format(
        timestamp=datetime.now().isoformat(),
        window=analysis.get('evaluation_window', 14),
        status_emoji=status_emoji,
        status=status.upper(),
        ratio=f"{ratio:.3f}",
        implementations=analysis.get('implementations_completed', 0),
        total_charters=analysis.get('total_charters', 0),
        trend=analysis.get('trend', 'stable'),
        implementations_completed=analysis.get('implementations_completed', 0),
        ideas_in_progress=analysis.get('ideas_in_progress', 0),
        ideas_abandoned=analysis.get('ideas_abandoned', 0),
        avg_days_to_complete=analysis.get('avg_days_to_complete', 0),
        stalled_charters_section=format_stalled_charters(analysis),
        insights=generate_insights(analysis)
    )
    
    return report


def main():
    parser = argparse.ArgumentParser(description='Generate streak report from analysis data')
    parser.add_argument('--analysis-file', required=True, help='Path to streak analysis JSON')
    parser.add_argument('--template', required=False, help='Path to report template')
    parser.add_argument('--output', required=True, help='Output markdown file path')
    
    args = parser.parse_args()
    
    analysis_file = Path(args.analysis_file)
    if not analysis_file.exists():
        print(f"Error: Analysis file not found: {analysis_file}", file=sys.stderr)
        sys.exit(1)
    
    # Load analysis data
    analysis = load_analysis(analysis_file)
    
    # Load template
    template_path = Path(args.template) if args.template else None
    template = load_template(template_path) if template_path else get_default_template()
    
    # Generate report
    report = generate_report(analysis, template)
    
    # Write output
    output_path = Path(args.output)
    output_path.parent.mkdir(parents=True, exist_ok=True)
    
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(report)
    
    print(f"‚úÖ Streak report generated: {output_path}")


if __name__ == '__main__':
    main()