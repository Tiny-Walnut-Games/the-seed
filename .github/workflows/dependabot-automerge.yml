name: 🤖 Dependabot Auto-Merge

on:
  pull_request_target:
    types: [opened, labeled, synchronize, reopened]
  workflow_dispatch:

env:
  # Set to true to enable auto-merge by default (without ritual-auto label)
  # Default: false for safety - requires manual "ritual-auto" label
  DEFAULT_AUTOMERGE: false

jobs:
  dependabot-automerge:
    name: Auto-merge Dependabot PRs
    runs-on: ubuntu-latest
    # Only run on dependabot PRs to avoid security issues
    if: github.actor == 'dependabot[bot]'
    
    permissions:
      contents: write
      pull-requests: write
      
    # Prevent race conditions when multiple events trigger simultaneously
    concurrency:
      group: dependabot-automerge-${{ github.event.pull_request.number }}
      cancel-in-progress: true

    steps:
      - name: 🔍 Check PR eligibility
        id: check
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_LABELS: ${{ toJSON(github.event.pull_request.labels.*.name) }}
        run: |
          echo "🤖 Evaluating Dependabot PR #$PR_NUMBER for auto-merge eligibility..."
          
          # Check for explicit blocking label
          if echo '${{ env.PR_LABELS }}' | jq -r '.[]' | grep -q "no-automerge"; then
            echo "❌ PR has 'no-automerge' label - skipping auto-merge"
            echo "eligible=false" >> $GITHUB_OUTPUT
            echo "reason=blocked-by-label" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if auto-merge should be enabled
          has_ritual_auto=$(echo '${{ env.PR_LABELS }}' | jq -r '.[]' | grep -c "ritual-auto" || true)
          default_enabled="${{ env.DEFAULT_AUTOMERGE }}"
          
          if [[ "$has_ritual_auto" -gt 0 ]] || [[ "$default_enabled" == "true" ]]; then
            echo "✅ PR eligible for auto-merge"
            echo "eligible=true" >> $GITHUB_OUTPUT
            if [[ "$has_ritual_auto" -gt 0 ]]; then
              echo "reason=ritual-auto-label" >> $GITHUB_OUTPUT
            else
              echo "reason=default-enabled" >> $GITHUB_OUTPUT
            fi
          else
            echo "ℹ️  PR not eligible - requires 'ritual-auto' label or DEFAULT_AUTOMERGE=true"
            echo "eligible=false" >> $GITHUB_OUTPUT
            echo "reason=requires-label" >> $GITHUB_OUTPUT
          fi

      - name: 🎯 Check PR status
        id: status
        if: steps.check.outputs.eligible == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          echo "🔍 Checking PR status and reviews..."
          
          # Get PR details
          pr_data=$(gh api /repos/${{ github.repository }}/pulls/$PR_NUMBER)
          mergeable=$(echo "$pr_data" | jq -r '.mergeable')
          draft=$(echo "$pr_data" | jq -r '.draft')
          
          # Check if PR is in draft
          if [[ "$draft" == "true" ]]; then
            echo "❌ PR is in draft state"
            echo "ready=false" >> $GITHUB_OUTPUT
            echo "reason=draft" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if PR is mergeable
          if [[ "$mergeable" == "false" ]]; then
            echo "❌ PR has merge conflicts"
            echo "ready=false" >> $GITHUB_OUTPUT
            echo "reason=conflicts" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check CI status
          checks_url="/repos/${{ github.repository }}/commits/${{ github.event.pull_request.head.sha }}/check-runs"
          checks=$(gh api "$checks_url" --jq '.check_runs[] | select(.status == "completed") | .conclusion')
          
          failed_checks=$(echo "$checks" | grep -c "failure" || true)
          if [[ $failed_checks -gt 0 ]]; then
            echo "❌ PR has failing checks"
            echo "ready=false" >> $GITHUB_OUTPUT
            echo "reason=failing-checks" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          pending_checks=$(gh api "$checks_url" --jq '.check_runs[] | select(.status != "completed") | .name' || true)
          if [[ -n "$pending_checks" ]]; then
            echo "⏳ PR has pending checks: $pending_checks"
            echo "ready=false" >> $GITHUB_OUTPUT
            echo "reason=pending-checks" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "✅ PR is ready for auto-merge"
          echo "ready=true" >> $GITHUB_OUTPUT

      - name: 🚀 Enable auto-merge
        if: steps.check.outputs.eligible == 'true' && steps.status.outputs.ready == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          echo "🚀 Enabling auto-merge for PR #$PR_NUMBER..."
          
          # Enable auto-merge with squash strategy
          gh api -X PUT /repos/${{ github.repository }}/pulls/$PR_NUMBER/merge \
            -f merge_method=squash \
            -f auto_merge=true
          
          echo "✅ Auto-merge enabled! PR will merge when all checks pass."
          
          # Add a comment to document the auto-merge
          cat << 'EOF' | gh api /repos/${{ github.repository }}/issues/$PR_NUMBER/comments --input -
          {
            "body": "🤖 **RitualBot Auto-Merge Activated**\n\nThis Dependabot PR has been approved for auto-merge based on:\n• **Trigger**: ${{ steps.check.outputs.reason }}\n• **Strategy**: Squash merge\n• **Safety**: Will only merge when all checks pass\n\nThe merge will happen automatically once all CI checks complete successfully. 🚀"
          }
          EOF

      - name: 📝 Log skipped PR
        if: steps.check.outputs.eligible == 'false' || steps.status.outputs.ready == 'false'
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          eligible="${{ steps.check.outputs.eligible }}"
          ready="${{ steps.status.outputs.ready }}"
          check_reason="${{ steps.check.outputs.reason }}"
          status_reason="${{ steps.status.outputs.reason }}"
          
          echo "📝 PR #$PR_NUMBER not auto-merged:"
          
          if [[ "$eligible" == "false" ]]; then
            case "$check_reason" in
              "blocked-by-label")
                echo "  ❌ Explicitly blocked by 'no-automerge' label"
                ;;
              "requires-label")
                echo "  ℹ️  Requires 'ritual-auto' label (DEFAULT_AUTOMERGE=false)"
                echo "  💡 Add 'ritual-auto' label to enable auto-merge"
                ;;
            esac
          elif [[ "$ready" == "false" ]]; then
            case "$status_reason" in
              "draft")
                echo "  📝 PR is in draft state"
                ;;
              "conflicts")
                echo "  ⚡ PR has merge conflicts"
                ;;
              "failing-checks")
                echo "  🔴 PR has failing CI checks"
                ;;
              "pending-checks")
                echo "  ⏳ Waiting for CI checks to complete"
                ;;
            esac
          fi

      - name: 🛡️ Security summary
        if: always()
        run: |
          echo "🛡️ **RitualBot Auto-Merge Security Summary**"
          echo "- ✅ Only runs on dependabot[bot] actor PRs"
          echo "- ✅ Requires explicit approval (ritual-auto label OR config)"
          echo "- ✅ Respects 'no-automerge' blocking label"
          echo "- ✅ Waits for all CI checks to pass"
          echo "- ✅ Uses squash merge strategy"
          echo "- ✅ Least-privilege permissions (contents: write, pull-requests: write)"
          echo ""
          echo "Current config: DEFAULT_AUTOMERGE=${{ env.DEFAULT_AUTOMERGE }}"