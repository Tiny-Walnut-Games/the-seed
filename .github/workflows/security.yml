name: üõ°Ô∏è Security & Vulnerability Assessment

# Jerry's legendary security validation system
# Based on MetVanDAMN Overlord Sentinel optimizations
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security scan weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

# Security-focused concurrency controls
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # üîç Fast security preflight - fails quickly for obvious security issues
  security-preflight:
    runs-on: ubuntu-latest
    steps:
      - name: Shallow checkout for security scan
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Security Preflight Check
        run: |
          echo "üõ°Ô∏è Running security preflight validation..."
          
          # Check for common security anti-patterns
          echo "Checking for hardcoded secrets..."
          if grep -r "password\s*=" --include="*.py" --include="*.js" --include="*.ts" --include="*.yaml" .; then
            echo "‚ùå Potential hardcoded passwords found"
            exit 1
          fi
          
          if grep -r "api[_-]?key\s*=" --include="*.py" --include="*.js" --include="*.ts" --include="*.yaml" .; then
            echo "‚ùå Potential hardcoded API keys found"
            exit 1
          fi
          
          # Check for insecure file permissions in scripts
          if find scripts/ -name "*.sh" -perm /o+w 2>/dev/null | grep -q .; then
            echo "‚ùå World-writable scripts found - security risk"
            exit 1
          fi
          
          echo "‚úÖ Security preflight passed"

  # üîê Dependency vulnerability scanning
  dependency-scan:
    runs-on: ubuntu-latest
    needs: security-preflight
    # Only run on security-relevant changes
    if: >
      github.event_name == 'push' ||
      github.event_name == 'schedule' ||
      (github.event_name == 'pull_request' && (
        contains(github.event.pull_request.changed_files.*.filename, 'requirements.txt') ||
        contains(github.event.pull_request.changed_files.*.filename, 'package.json') ||
        contains(github.event.pull_request.changed_files.*.filename, '.github/')
      ))
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python for security scanning
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'scripts/requirements.txt'

      - name: Install security scanning tools
        run: |
          python -m pip install --upgrade pip
          # Install safety for Python dependency scanning
          pip install safety bandit semgrep
          # Try to install project dependencies for scanning
          pip install -r scripts/requirements.txt || echo "‚ö†Ô∏è Some dependencies failed to install (acceptable for scanning)"

      - name: Python Dependency Vulnerability Scan
        run: |
          echo "üîç Scanning Python dependencies for vulnerabilities..."
          # Use safety to check for known vulnerabilities
          safety check --json --output safety-report.json || echo "‚ö†Ô∏è Vulnerabilities found - check report"
          
          # Display summary
          if [ -f safety-report.json ]; then
            echo "üìã Safety scan completed - check artifacts for detailed report"
          fi

      - name: Static Security Analysis (Bandit)
        run: |
          echo "üîç Running static security analysis..."
          # Scan Python files for security issues
          bandit -r src/ -f json -o bandit-report.json || echo "‚ö†Ô∏è Security issues found - check report"
          bandit -r scripts/ -f json -o bandit-scripts-report.json || echo "‚ö†Ô∏è Security issues in scripts - check report"

      - name: Advanced Security Scanning (Semgrep)
        run: |
          echo "üîç Running advanced security pattern detection..."
          # Use semgrep for advanced security pattern detection
          semgrep --config=auto --json --output=semgrep-report.json . || echo "‚ö†Ô∏è Security patterns detected - check report"

      - name: Security Report Summary
        run: |
          echo "üìä Security Scan Summary:"
          echo "=========================="
          
          # Count issues in each report
          if [ -f safety-report.json ]; then
            safety_issues=$(jq '.vulnerabilities | length' safety-report.json 2>/dev/null || echo "0")
            echo "Python dependency vulnerabilities: $safety_issues"
          fi
          
          if [ -f bandit-report.json ]; then
            bandit_issues=$(jq '.results | length' bandit-report.json 2>/dev/null || echo "0")
            echo "Static analysis security issues: $bandit_issues"
          fi
          
          if [ -f semgrep-report.json ]; then
            semgrep_issues=$(jq '.results | length' semgrep-report.json 2>/dev/null || echo "0")
            echo "Advanced pattern security issues: $semgrep_issues"
          fi

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            safety-report.json
            bandit-report.json
            bandit-scripts-report.json
            semgrep-report.json
          retention-days: 30

  # üîí Secrets scanning and validation
  secrets-scan:
    runs-on: ubuntu-latest
    needs: security-preflight
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for secret scanning

      - name: Run TruffleHog Secret Scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Custom Secret Pattern Scanning
        run: |
          echo "üîç Running custom secret pattern detection..."
          
          # Define custom patterns for common secrets
          declare -a patterns=(
            "(?i)(password|passwd|pwd)\s*[:=]\s*['\"][^'\"]*['\"]"
            "(?i)(api[_-]?key|apikey)\s*[:=]\s*['\"][^'\"]*['\"]"
            "(?i)(secret|token)\s*[:=]\s*['\"][^'\"]*['\"]"
            "(?i)(database[_-]?url|db[_-]?url)\s*[:=]\s*['\"][^'\"]*['\"]"
            "(?i)(private[_-]?key)\s*[:=]\s*['\"][^'\"]*['\"]"
          )
          
          secret_found=false
          
          for pattern in "${patterns[@]}"; do
            if grep -r -P "$pattern" --include="*.py" --include="*.js" --include="*.ts" --include="*.yaml" --include="*.json" --exclude-dir=".git" .; then
              echo "‚ö†Ô∏è Potential secret pattern found: $pattern"
              secret_found=true
            fi
          done
          
          if [ "$secret_found" = true ]; then
            echo "‚ùå Potential secrets detected - review findings"
            echo "üí° Consider using environment variables or secret management systems"
          else
            echo "‚úÖ No obvious secret patterns detected"
          fi

  # üõ°Ô∏è File permission and configuration security
  config-security:
    runs-on: ubuntu-latest
    needs: security-preflight
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: File Permission Security Check
        run: |
          echo "üîç Checking file permissions for security issues..."
          
          # Check for world-writable files
          world_writable=$(find . -type f -perm /o+w -not -path "./.git/*" 2>/dev/null || true)
          if [ ! -z "$world_writable" ]; then
            echo "‚ùå World-writable files found (security risk):"
            echo "$world_writable"
            exit 1
          fi
          
          # Check for executable files that shouldn't be
          suspicious_executables=$(find . -type f -executable -name "*.py" -o -name "*.js" -o -name "*.json" -o -name "*.yaml" 2>/dev/null || true)
          if [ ! -z "$suspicious_executables" ]; then
            echo "‚ö†Ô∏è Suspicious executable files found:"
            echo "$suspicious_executables"
            echo "üí° Consider removing execute permissions from non-script files"
          fi
          
          echo "‚úÖ File permission check completed"

      - name: Configuration Security Review
        run: |
          echo "üîç Reviewing configuration files for security issues..."
          
          # Check for debug flags in production configs
          if grep -r "debug.*true" --include="*.yaml" --include="*.json" .; then
            echo "‚ö†Ô∏è Debug flags found in configuration - review for production readiness"
          fi
          
          # Check for insecure protocol usage
          if grep -r "http://" --include="*.yaml" --include="*.json" --include="*.md" . | grep -v "localhost\|127.0.0.1\|example.com"; then
            echo "‚ö†Ô∏è Insecure HTTP URLs found - consider using HTTPS"
          fi
          
          echo "‚úÖ Configuration security review completed"

  # üö® Security policy compliance
  compliance-check:
    runs-on: ubuntu-latest
    needs: [dependency-scan, secrets-scan, config-security]
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Security Policy Compliance Check
        run: |
          echo "üìã Checking security policy compliance..."
          
          # Check for required security files
          required_files=("SECURITY.md" ".github/workflows/security.yml")
          missing_files=()
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              missing_files+=("$file")
            fi
          done
          
          if [ ${#missing_files[@]} -gt 0 ]; then
            echo "‚ö†Ô∏è Missing security policy files: ${missing_files[*]}"
            echo "üí° Consider adding these files for better security posture"
          fi
          
          # Check for security documentation
          if [ ! -f "SECURITY.md" ]; then
            echo "üí° Consider adding SECURITY.md with vulnerability reporting instructions"
          fi
          
          echo "‚úÖ Security compliance check completed"

      - name: Generate Security Summary
        run: |
          echo "üìä Security Assessment Summary" > security-summary.md
          echo "=============================" >> security-summary.md
          echo "" >> security-summary.md
          echo "**Assessment Date:** $(date -u)" >> security-summary.md
          echo "**Repository:** ${{ github.repository }}" >> security-summary.md
          echo "**Branch:** ${{ github.ref_name }}" >> security-summary.md
          echo "" >> security-summary.md
          
          # Add job status summary
          echo "## Job Results" >> security-summary.md
          echo "- **Dependency Scan:** ${{ needs.dependency-scan.result }}" >> security-summary.md
          echo "- **Secrets Scan:** ${{ needs.secrets-scan.result }}" >> security-summary.md
          echo "- **Config Security:** ${{ needs.config-security.result }}" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## Recommendations" >> security-summary.md
          echo "- Review all security reports in workflow artifacts" >> security-summary.md
          echo "- Address any high-severity vulnerabilities immediately" >> security-summary.md
          echo "- Consider implementing automated security monitoring" >> security-summary.md
          echo "- Keep dependencies updated regularly" >> security-summary.md
          
          cat security-summary.md

      - name: Upload Security Summary
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-assessment-summary
          path: security-summary.md
          retention-days: 90

  # üõ°Ô∏è Final security certification
  security-certification:
    runs-on: ubuntu-latest
    needs: [dependency-scan, secrets-scan, config-security, compliance-check]
    if: always()
    steps:
      - name: Security Assessment Results
        run: |
          echo "üõ°Ô∏è Security Assessment Complete"
          echo "==============================="
          
          # Determine overall security status
          dependency_status="${{ needs.dependency-scan.result }}"
          secrets_status="${{ needs.secrets-scan.result }}"
          config_status="${{ needs.config-security.result }}"
          compliance_status="${{ needs.compliance-check.result }}"
          
          echo "Individual Results:"
          echo "- Dependency Scan: $dependency_status"
          echo "- Secrets Scan: $secrets_status"
          echo "- Config Security: $config_status"
          echo "- Compliance Check: $compliance_status"
          
          # Count failures
          failures=0
          if [[ "$dependency_status" == "failure" ]]; then ((failures++)); fi
          if [[ "$secrets_status" == "failure" ]]; then ((failures++)); fi
          if [[ "$config_status" == "failure" ]]; then ((failures++)); fi
          if [[ "$compliance_status" == "failure" ]]; then ((failures++)); fi
          
          echo ""
          if [ $failures -eq 0 ]; then
            echo "üõ°Ô∏è SECURITY CERTIFICATION: APPROVED ‚úÖ"
            echo "All security checks passed successfully!"
          elif [ $failures -le 2 ]; then
            echo "üõ°Ô∏è SECURITY CERTIFICATION: CONDITIONAL ‚ö†Ô∏è"
            echo "Some security issues detected - review required"
          else
            echo "üõ°Ô∏è SECURITY CERTIFICATION: REQUIRES ATTENTION ‚ùå"
            echo "Multiple security issues detected - immediate review needed"
            exit 1
          fi

      - name: Security Badge Status
        run: |
          # This could be used to update a security badge or status
          if [ ${{ needs.dependency-scan.result == 'success' && needs.secrets-scan.result == 'success' && needs.config-security.result == 'success' }} ]; then
            echo "SECURITY_STATUS=passing" >> $GITHUB_ENV
          else
            echo "SECURITY_STATUS=needs-attention" >> $GITHUB_ENV
          fi
          
          echo "üèÜ Security badge status: $SECURITY_STATUS"
