name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Nightly deep scans at 02:00 UTC for comprehensive analysis
    - cron: '0 2 * * *'
    # Weekly comprehensive scans every Monday at 09:00 UTC  
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - dependencies
        - secrets
        - code

# Cancel in-progress runs for the same branch to save CI minutes  
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # üõ°Ô∏è Dependency vulnerability scanning - ADVISORY
  dependency-scan:
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'dependencies'
    runs-on: ubuntu-latest
    name: Dependency Security Scan

    continue-on-error: true  # Advisory - don't block merges on security scan issues
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 1  # Shallow clone for speed

      - name: Set up Python (cached)
        uses: actions/setup-python@v5.6.0
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'scripts/requirements.txt'

      - name: Install dependencies with retry logic
        run: |
          python -m pip install --upgrade pip
          # Retry logic for network resilience
          for i in {1..3}; do
            if pip install -r scripts/requirements.txt; then break; fi
            echo "Attempt $i failed, retrying in 5 seconds..."
            sleep 5
          done
          # Install security scanning tools with timeout
          timeout 300 pip install safety bandit semgrep

      - name: Run Python dependency security scan (Guarded Pass)
        run: |
          echo "üîç Running Python dependency vulnerability scan..."
          chmod +x scripts/guarded-pass.sh
          ./scripts/guarded-pass.sh "security-scan" sh -c "safety check --json --output safety-report.json || true"
          if [ -f safety-report.json ]; then
            echo "üìã Safety scan results:"
            cat safety-report.json | python -m json.tool
          fi

      - name: Run Python security linting with Bandit
        run: |
          echo "üîç Running Bandit security linting..."
          # Scoped to specific paths to reduce noise
          bandit -r scripts/ src/ -f json -o bandit-report.json --skip B101,B601 || true
          if [ -f bandit-report.json ]; then
            echo "üìã Bandit scan results:"
            cat bandit-report.json | python -m json.tool
          fi

      - name: Upload security reports (conditional on main branch)
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.0
        # Only upload artifacts on main branch or scheduled runs to reduce external calls
        if: always() && (github.ref == 'refs/heads/main' || github.event_name == 'schedule')
        with:
          name: security-reports-${{ github.run_id }}
          path: |
            safety-report.json
            bandit-report.json
          retention-days: 7  # Reduced retention for PR artifacts

  # üîê Secret scanning (GitHub native + additional tools) - ADVISORY
  secret-scan:
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'secrets'
    runs-on: ubuntu-latest
    name: Secret Detection Scan
    continue-on-error: true  # Advisory - don't block merges on secret detection
    steps:
      - name: Checkout repository
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v4.3.5
        with:
          fetch-depth: 0  # Full history needed for secret scanning

      - name: Run TruffleHog secret scan
        uses: trufflesecurity/trufflehog@0f58ae7c5036094a1e3e750d18772af92821b503 # v3.90.5
        with:
          path: ./
          base: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || 'main' }}
          head: HEAD
          # Scoped scanning: only verified secrets on PRs, comprehensive on scheduled runs
          extra_args: ${{ github.event_name == 'schedule' && '--debug' || '--debug --only-verified' }}

  # üîç Code security analysis - ADVISORY
  code-scan:
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'code'
    runs-on: ubuntu-latest
    name: Code Security Analysis
    continue-on-error: true  # Advisory - don't block merges on code analysis
    permissions:
      actions: read
      contents: read
      # Only elevate security-events permission on main branch or scheduled runs
      security-events: ${{ github.ref == 'refs/heads/main' || github.event_name == 'schedule' && 'write' || 'read' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 1  # Shallow clone for speed

      - name: Initialize CodeQL
        uses: github/codeql-action/init@cc18fa8621ebc2961c68a319279dcf9e91aa5791 # v3.28.0
        with:
          # Scoped languages: only what we actually use
          languages: python, javascript
          # Conditional query depth: security-only for PRs, comprehensive for scheduled
          queries: ${{ github.event_name == 'schedule' && 'security-extended,security-and-quality' || 'security-extended' }}
          
      - name: Autobuild
        uses: github/codeql-action/autobuild@cc18fa8621ebc2961c68a319279dcf9e91aa5791 # v3.28.0

      - name: Perform CodeQL Analysis  
        uses: github/codeql-action/analyze@cc18fa8621ebc2961c68a319279dcf9e91aa5791 # v3.28.0
        with:
          category: "/language:python,javascript"
          # Conditional uploads: only upload SARIF results on main or scheduled runs
          upload: ${{ github.ref == 'refs/heads/main' || github.event_name == 'schedule' }}

  # üß∞ MCP Security Configuration Validation - ADVISORY  
  mcp-security-validation:
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.scan_type == 'all'
    runs-on: ubuntu-latest
    name: MCP Security Configuration
    continue-on-error: true  # Advisory - don't block merges on MCP validation
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 1  # Shallow clone for speed

      - name: Set up Python (cached)
        uses: actions/setup-python@v5.6.0
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'scripts/requirements.txt'

      - name: Install dependencies with retry logic
        run: |
          python -m pip install --upgrade pip
          # Retry logic for network resilience
          for i in {1..3}; do
            if pip install -r scripts/requirements.txt; then break; fi
            echo "Attempt $i failed, retrying in 5 seconds..."
            sleep 5
          done

      - name: Validate MCP Security Configuration (Guarded Pass)
        run: |
          echo "üîí Validating MCP security configuration..."
          chmod +x scripts/guarded-pass.sh
          ./scripts/guarded-pass.sh "mcp-validator" python scripts/validate_mcp_config.py --strict

      - name: Validate Package Installation Security
        run: |
          echo "üì¶ Validating package installation security..."
          chmod +x scripts/validate_package_install.sh
          timeout 60 scripts/validate_package_install.sh
          
  # üìä Security Summary Report - ALWAYS RUNS (for reporting)
  security-summary:
    needs: [dependency-scan, secret-scan, code-scan, mcp-security-validation]
    if: always()  # Run even if advisory jobs fail
    runs-on: ubuntu-latest
    name: Security Summary
    timeout-minutes: 5  # Rate-limit safeguard
    permissions:
      contents: write  # Needed for TLDL commit on scheduled runs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Generate security summary
        run: |
          echo "üõ°Ô∏è Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "======================" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note**: All security jobs are advisory and do not block merges" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Type |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result }} | Advisory |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Scan | ${{ needs.secret-scan.result }} | Advisory |" >> $GITHUB_STEP_SUMMARY  
          echo "| Code Analysis | ${{ needs.code-scan.result }} | Advisory |" >> $GITHUB_STEP_SUMMARY
          echo "| MCP Security | ${{ needs.mcp-security-validation.result }} | Advisory |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Count successful jobs
          success_count=0
          [[ "${{ needs.dependency-scan.result }}" == "success" ]] && success_count=$((success_count + 1))
          [[ "${{ needs.secret-scan.result }}" == "success" ]] && success_count=$((success_count + 1))
          [[ "${{ needs.code-scan.result }}" == "success" ]] && success_count=$((success_count + 1))
          [[ "${{ needs.mcp-security-validation.result }}" == "success" ]] && success_count=$((success_count + 1))
          
          if [[ $success_count -eq 4 ]]; then
            echo "‚úÖ **All security scans completed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "üõ°Ô∏è **Security posture: EXCELLENT**" >> $GITHUB_STEP_SUMMARY
          elif [[ $success_count -ge 2 ]]; then
            echo "‚ö†Ô∏è **Some security scans had issues ($success_count/4 successful)**" >> $GITHUB_STEP_SUMMARY
            echo "üîç **Security posture: ACCEPTABLE - Review artifacts for details**" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùó **Multiple security scans had issues ($success_count/4 successful)**" >> $GITHUB_STEP_SUMMARY
            echo "üîç **Security posture: NEEDS ATTENTION - Review artifacts**" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Security scan completed at $(date)*" >> $GITHUB_STEP_SUMMARY
          echo "*Advisory jobs use continue-on-error and won't block merges*" >> $GITHUB_STEP_SUMMARY
